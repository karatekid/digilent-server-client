// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Device.h"
#include <thrift/protocol/TJSONProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/THttpServer.h>

#include <dwfobj/Device.h>
#include <dwfobj/helper.h>
#include <dwfobj/easylogging++.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class DeviceHandler : virtual public DeviceIf {
 public:
  DeviceHandler() {
    // Your initialization goes here
  }

  void open() {
    // Your implementation goes here
    printf("open\n");
  }

  void getDigitalInputConfig( ::DigitalInput& _return) {
    // Your implementation goes here
    printf("getDigitalInputConfig\n");
  }

  void configureDigitalInput( ::DigitalInput& _return, const  ::DigitalInput& config) {
    // Your implementation goes here
    printf("configureDigitalInput\n");
  }

  void resetDigitalInput() {
    // Your implementation goes here
    printf("resetDigitalInput\n");
  }

  void startDigitalInput() {
    // Your implementation goes here
    printf("startDigitalInput\n");
  }

  void stopDigitalInput() {
    // Your implementation goes here
    printf("stopDigitalInput\n");
  }

  void readDigitalInput(std::vector< ::DigitalData> & _return) {
    // Your implementation goes here
    printf("readDigitalInput\n");
  }

  void getAnalogInputConfig( ::AnalogInput& _return) {
    // Your implementation goes here
    printf("getAnalogInputConfig\n");
  }

  void configureAnalogInput( ::AnalogInput& _return, const  ::AnalogInput& config) {
    // Your implementation goes here
    printf("configureAnalogInput\n");
  }

  void resetAnalogInput() {
    // Your implementation goes here
    printf("resetAnalogInput\n");
  }

  void startAnalogInput() {
    // Your implementation goes here
    printf("startAnalogInput\n");
  }

  void stopAnalogInput() {
    // Your implementation goes here
    printf("stopAnalogInput\n");
  }

  void readAnalogInput(std::vector< ::AnalogData> & _return) {
    // Your implementation goes here
    printf("readAnalogInput\n");
  }

};

INITIALIZE_EASYLOGGINGPP

int main(int argc, char **argv) {
    initializeLogging(argc, argv);
    int port = 9090;
    shared_ptr<DeviceHandler> handler(new DeviceHandler());
    shared_ptr<TProcessor> processor(new DeviceProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new THttpServerTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TJSONProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

