// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <set>

#include "Device.h"
#include <thrift/protocol/TJSONProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/THttpServer.h>

#include <dwfobj/Device.h>
#include <dwfobj/Helper.h>
#include <dwfobj/easylogging++.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class DeviceHandler : virtual public DeviceIf {
 public:
  DeviceHandler() {
    // Your initialization goes here
  }

  void getDigitalInputConfig( ::DigitalInput& _return) {
    // Your implementation goes here
    printf("getDigitalInputConfig\n");
    _return.divider = getCRConfigInt(
            (dwf::ContinuousRangeConfiguration<int> *)
            &dev.digitalIn.divider);
    _return.bufferSize = getCRConfigInt(
            (dwf::ContinuousRangeConfiguration<int> *)
            &dev.digitalIn.bufferSize);
    _return.acquisitionMode = getSetConfig<AcqMode>(
            (dwf::SetConfiguration<AcqMode> *)
            &dev.digitalIn.acquisitionMode);

    _return.triggerSource = getSetConfig<TrigSrc>(
            (dwf::SetConfiguration<TrigSrc> *)
            &dev.digitalIn.triggerSource);
    _return.triggerPosition = getCRConfigInt(
            (dwf::ContinuousRangeConfiguration<int> *)
            &dev.digitalIn.triggerPosition);
    _return.triggerAutoTimeout = getDRConfigDouble(
            (dwf::DiscreteRangeConfiguration<double> *)
            &dev.digitalIn.triggerAutoTimeout);
    _return.trigger.val = getDInTrigger(dev.digitalIn.trigger.get());
    _return.trigger.options = getDInTrigger(dev.digitalIn.trigger.getBitmask());
    _return.trigger.__isset.options = true;

    _return.internalClkFreq = dev.digitalIn.getInternalClkFreq();
    _return.__isset.internalClkFreq = true;
  }

  void configureDigitalInput( ::DigitalInput& _return, const  ::DigitalInput& config) {
    // Your implementation goes here
    printf("configureDigitalInput\n");
    // Set new configs
    dev.digitalIn.divider.set(config.divider.val);
    dev.digitalIn.bufferSize.set(config.bufferSize.val);
    dev.digitalIn.acquisitionMode.set(config.acquisitionMode.val);
    dev.digitalIn.triggerSource.set(config.triggerSource.val);
    dev.digitalIn.triggerPosition.set(config.triggerPosition.val);
    dev.digitalIn.triggerAutoTimeout.set(config.triggerAutoTimeout.val);
    printf("WARNING: Can't set trigger yet\n");
    //dev.digitalIn.trigger.set(createDInTrigger(config.trigger.val));

    // Configure
    dev.digitalIn.configure();

    // Get new config
    getDigitalInputConfig(_return);
  }

  void resetDigitalInput() {
    // Your implementation goes here
    printf("resetDigitalInput\n");
    dev.digitalIn.reset();
  }

  void startDigitalInput() {
    // Your implementation goes here
    printf("startDigitalInput\n");
    dev.digitalIn.start();
  }

  void stopDigitalInput() {
    // Your implementation goes here
    printf("stopDigitalInput\n");
    dev.digitalIn.stop();
  }

  void readDigitalInput(std::vector< ::DigitalData> & _return) {
    // Your implementation goes here
    printf("readDigitalInput\n");
    std::vector<dwf::DigitalData> arr = dev.digitalIn.read();
    for(int i = 0; i < arr.size(); ++i) {
        _return.push_back(arr[i].to_ulong());
    }
  }

  void getAnalogInputConfig( ::AnalogInput& _return) {
    // Your implementation goes here
    printf("getAnalogInputConfig\n");
  }

  void configureAnalogInput( ::AnalogInput& _return, const  ::AnalogInput& config) {
    // Your implementation goes here
    printf("configureAnalogInput\n");
  }

  void resetAnalogInput() {
    // Your implementation goes here
    printf("resetAnalogInput\n");
  }

  void startAnalogInput() {
    // Your implementation goes here
    printf("startAnalogInput\n");
  }

  void stopAnalogInput() {
    // Your implementation goes here
    printf("stopAnalogInput\n");
  }

  void readAnalogInput(std::vector< ::AnalogData> & _return) {
    // Your implementation goes here
    printf("readAnalogInput\n");
  }
 private:
  dwf::Device dev;
  // To JS
  ::CRConfigInt getCRConfigInt(dwf::ContinuousRangeConfiguration<int> * devCRConfig) {
      ::CRConfigInt returnVal;
      dwf::ContinuousRange<int> range = devCRConfig->getRange();
      returnVal.val = devCRConfig->get();
      returnVal.min = range.min;
      returnVal.max = range.max;
      returnVal.__isset.min = true;
      returnVal.__isset.max = true;
      return returnVal;
  }
  // From JS
  /*
  dwf::ContinuousRangeConfiguration<int> setCRConfigInt(CRConfigInt val) {
      dwf::ContinuousRangeConfiguration<int> returnVal;
      returnVal.set(val.val);
  }
  */
  template<typename T>
  ::SetConfig getSetConfig(dwf::SetConfiguration<T> * devSetConfig) {
      ::SetConfig returnVal;
      returnVal.val = devSetConfig->get();
      std::set<T> tmpSet = devSetConfig->getOptions(); 
      for(auto it = tmpSet.begin(); it != tmpSet.end(); ++it) {
          returnVal.options.insert(*it);
      }
      returnVal.__isset.options = true;
      return returnVal;
  }
  ::DRConfigDouble getDRConfigDouble(dwf::DiscreteRangeConfiguration<double> * devDRConfig) {
      ::DRConfigDouble returnVal;
      returnVal.val = devDRConfig->get();
      dwf::DiscreteRange<double> range = devDRConfig->getRange();
      returnVal.min = range.min;
      returnVal.max = range.max;
      returnVal.stepSize = range.stepSize;
      returnVal.__isset.min = true;
      returnVal.__isset.max = true;
      returnVal.__isset.stepSize = true;
      return returnVal;
  }
  // To JS
  ::DigitalInTrigger getDInTrigger(dwf::DigitalInTriggerStruct trigStruct) {
      ::DigitalInTrigger returnVal;
      returnVal.LevelLow = getSetFromInt(trigStruct.levelLow);
      returnVal.LevelHigh = getSetFromInt(trigStruct.levelHigh);
      returnVal.EdgeRise = getSetFromInt(trigStruct.edgeRise);
      returnVal.EdgeFall = getSetFromInt(trigStruct.edgeFall);
      return returnVal;
  }
  // From JS
  dwf::DigitalInTriggerStruct createDInTrigger(::DigitalInTrigger val) {
      dwf::DigitalInTriggerStruct trigStruct;
      trigStruct.levelLow  = getIntFromSet(val.LevelLow);
      trigStruct.levelHigh = getIntFromSet(val.LevelHigh);
      trigStruct.edgeRise  = getIntFromSet(val.EdgeRise);
      trigStruct.edgeFall  = getIntFromSet(val.EdgeFall);
      return trigStruct;
  }
  std::set<int> getSetFromInt(int val) {
      std::set<int> returnVal;
      for(int i = 0; i < sizeof(int); ++i) {
          if(IsBitSet(val, i)) {
              returnVal.insert(i);
          }
      }
      return returnVal;
  }
  int getIntFromSet(std::set<int> val) {
      int returnVal;
      for(auto it = val.begin(); it != val.end(); ++it) {
          returnVal &= *it;
      }
      return returnVal;
  }
};

INITIALIZE_EASYLOGGINGPP

int main(int argc, char **argv) {
    initializeLogging(argc, argv);
    int port = 9090;
    shared_ptr<DeviceHandler> handler(new DeviceHandler());
    shared_ptr<TProcessor> processor(new DeviceProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new THttpServerTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TJSONProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

